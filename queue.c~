/* queue.c --- 
 * 
 * 
 * Author: Vlado Vojdanovski
 * Created: Wed Oct  9 16:21:59 2019 (-0400)
 * Version: 
 * 
 * Description: 
 * 
 */

typedef struct Element
{
	void* data;
	struct Element *next;
} element;
	
typedef void queue_t
{
	int size;
	void* head;
	void* tail;
}
	
queue_t* qopen(void)
{
	queue_t *queue = (queue_t*) malloc(sizeof(Queue)); // Initialize our queue
	// and allocate memory
	queue->size = 0; // set the queue size to 0
	queue->head = NULL; // set the head and tail pointers to null
	queue->tail = NULL;

	return queue;
}

void qclose(queue_t *qp)
{
	void *element
		while(!isEmpty(qp))
			{
				element = qget(qp);
				free(element); // free up the queue memory
			}
	free(qp);
}

int32_t qput(queue_t *qp, void *elementp)
{
	element *lastElement = (element*)malloc(sizeof(element));
	lastElement->data = elementp;
	if (qp->size == 0)
		{
			//	qp->head = lastElement;
			qp->tail = lastElement;
		}
	else
		{
			lastElement->next = qp->tail;
			qp->tail = lastElement;
		}
	return 0;
}

void *qget(queue_t *qp)
{
	void* element = qp->tail;
	return element;
}

void qapply(queue_t *qp, void(*fn)(void* elementp))
{



}


void* qsearch(queue *qp, bool(*searchfn)(void* elementp, const void*keyp),
						 const void* skeyp)
{



}

void* qremove(queue_t *qp, bool(*searchfn)(void* elementp, const void* keyp),
							const void* skeyp)
{



}

void qconcat(queue_t *q1p, queue_t *q2p)
{



}
